#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
from asyncio import Queue
import signal
import sys

# installed
import uvloop
import redis.asyncio as aioredis
#from redistimeseries.client import Client

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

from data_cleaning import pruning_db
from messaging import telegram_bot as tlgrm
from streaming_data.data_producer import StreamingAccountData
from streaming_data.data_producer_binance import StreamingDataBinance
from transaction_management.deribit import api_requests, distributing_ws_data, get_instrument_summary,starter
from utilities import string_modification as str_mod, system_tools

def handle_ctrl_c(
    signum, 
    stack_frame
    )->None:
    
    sys.exit(0)
                  
signal_handler = system_tools.SignalHandler()

async def main():
    """
    https://redis-py.readthedocs.io/en/stable/examples/asyncio_examples.html
    """
    sub_account_id = "deribit-148510"

    # registering strategy config file    
    file_toml = "config_strategies.toml"
    
    try:

        private_data: object = api_requests.SendApiRequest(sub_account_id)

        pool = aioredis.ConnectionPool.from_url(
            "redis://localhost", 
            port=6379, 
            db=0, 
            protocol=3, 
            encoding="utf-8",
            decode_responses=True
            )
        
        client_redis: object = aioredis.Redis.from_pool(pool)
        
        # parsing config file
        config_app = system_tools.get_config_tomli(file_toml)

        # get tradable strategies
        tradable_config_app = config_app["tradable"]

        # get TRADABLE currencies
        currencies: list = [o["spot"] for o in tradable_config_app][0]

        strategy_attributes = config_app["strategies"]

        relevant_tables = config_app["relevant_tables"][0]

        await starter.initial_procedures(
            private_data,
            config_app,
            )
        
        initial_data = await starter.initial_data(private_data,
                                                  currencies,)
        
        settlement_periods = str_mod.remove_redundant_elements(
        str_mod.remove_double_brackets_in_list(
            [o["settlement_period"] for o in strategy_attributes]
        )
    )
        
        futures_instruments = await get_instrument_summary.get_futures_instruments(
            currencies,
            settlement_periods,
        )

        # get redis channels
        redis_channels: dict = config_app["redis_channels"][0]

        redis_keys: dict = config_app["redis_keys"][0]
        
        resolutions: list = [o["resolutions"] for o in tradable_config_app][0]

        strategy_attributes = config_app["strategies"]

        queue = Queue(maxsize=1)
        
        stream = StreamingAccountData(sub_account_id)
        stream_binance = StreamingDataBinance(sub_account_id)
        
        producer_task = asyncio.create_task(
            stream.ws_manager(
                client_redis,
                redis_channels,
                queue,
                futures_instruments,
                resolutions,
)
            ) 
                
        producer_task_binance = asyncio.create_task(
            stream_binance.ws_manager(
                client_redis,
                redis_channels,
                queue,
)
            ) 
                 
        saving_task = asyncio.create_task(
            distributing_ws_data.caching_distributing_data(
                client_redis,
                currencies,
                initial_data,
                redis_channels,
                redis_keys,
                strategy_attributes,
                queue,
                )
            ) 
                        
        await asyncio.sleep(0.0005)
        
        await asyncio.gather(
            
            producer_task, 
            
            producer_task_binance,
        
            saving_task,
         
            system_tools.back_up_db(60*10),
            
            pruning_db.clean_up_databases(60)
            
                        )  

        await queue.join()

    except Exception as error:
        
        system_tools.parse_error_message(error)
        await tlgrm.telegram_bot_sendtext (
            f"app-{error}",
            "general_error"
            )

if __name__ == "__main__":
    
    try:
        signal.signal(signal.SIGINT, handle_ctrl_c) # terminate on ctrl-c
        
        uvloop.run(main())
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        
        asyncio.get_event_loop().run_until_complete(main())
        
    except Exception as error:
        system_tools.parse_error_message(error)
        
        asyncio.run(tlgrm.telegram_bot_sendtext (
            error,
            "general_error"
            ))
