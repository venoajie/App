#!/usr/bin/python
# -*- coding: utf-8 -*-

import asyncio
import os

import httpx
from loguru import logger as log
import tomli

from configuration.label_numbering import get_now_unix_time
from db_management.sqlite_management import (
    deleting_row,
    executing_query_based_on_currency_or_instrument_and_strategy as get_query,
    insert_tables, 
    )
    
        
def get_custom_label(transaction: list) -> str:

    side= transaction["direction"]
    side_label= "Short" if side== "sell" else "Long"
    
    try:
        last_update= transaction["timestamp"]
    except:
        try:
            last_update= transaction["last_update_timestamp"]
        except:
            last_update= transaction["creation_timestamp"]
    
    return (f"custom{side_label.title()}-open-{last_update}")

async def get_result_from_db_queries (
    instrument_name,
    archive_db_table,
    ) -> list:
    

    column_trade: str= "id", "instrument_name","data", "label","trade_id"
                                    
    my_trades_currency_archive: list= await get_query(archive_db_table, 
                                                instrument_name, 
                                                "all", 
                                                "all", 
                                                column_trade)
    
    my_trades_currency_active_with_blanks = [o for o in my_trades_currency_archive\
                        if o["label"] is None]
    
               
    my_trades_archive_instrument_id = ([ o["id"] for o in my_trades_currency_active_with_blanks ])
    
    

    for id in my_trades_archive_instrument_id:
        transaction = [o["data"] for o in my_trades_currency_active_with_blanks if id == o["id"]]
        label_open: str = get_custom_label(transaction)
        transaction.update({"label": label_open})
        log.debug (transaction)
        