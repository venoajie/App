#!/usr/bin/python
# -*- coding: utf-8 -*-

# built ins
import asyncio

# installed
from loguru import logger as log

# user defined formula
from db_management.sqlite_management import (
    deleting_row,
    executing_query_based_on_currency_or_instrument_and_strategy as get_query,
    insert_tables,
    update_status_data,)
from utilities.system_tools import (
    async_raise_error_message,)

from utilities.string_modification import (
    remove_redundant_elements)

from strategies.basic_strategy import (
    get_label_integer,)


async def updating_db_with_new_data(
    trade_db_table: str,
    ) -> None:
    """
    
    
    """
                
    try:

        currency = "BTC"
    
        column_trade: str= "instrument_name","label", "amount", "price","side","timestamp","trade_id"
        
        my_trades_currency: list= await get_query(trade_db_table, 
                                                    currency, 
                                                    "all", 
                                                    "all", 
                                                    column_trade)


        my_trades_instrument_name =  remove_redundant_elements([o["instrument_name"] for o in my_trades_currency\
            if "PERPE"  in o["instrument_name"]])
        
        log.error (f"my_trades_instrument_name {my_trades_instrument_name}")
        
        for instrument_name in my_trades_instrument_name:
            
            
            datas = [o for o in my_trades_currency\
                if instrument_name in o["instrument_name"]]
                        
            for data in datas:
                
                log.debug (f"datas {data}")
                
                label = data ["label"]
                
                label_integer: int = get_label_integer (label) 
                
                data_under_label_integer = [ o for o in my_trades_currency\
                    if str(label_integer) in o["label"]]
                
                for data_selected in data_under_label_integer:
                    
                    label = data_selected ["label"]
                        
                    where_filter = f"label"
                    
                    await insert_tables(
                        "my_trades_closed_json", 
                        data_selected
                        )

                    await deleting_row (
                        "my_trades_all_json",
                        "databases/trading.sqlite3",
                        where_filter,
                        "=",
                        label,
                    )
                
    except Exception as error:
        await async_raise_error_message(error)
        
            
        
if __name__ == '__main__':

    trade_db_table= "my_trades_all_json"
           
    asyncio.run(updating_db_with_new_data(
    trade_db_table,
    ))