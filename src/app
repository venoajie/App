#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
import sys

# installed
from loguru import logger as log
#import signal
#from multiprocessing import Manager
#from multiprocessing.queues import Queue
#from multiprocessing import cpu_count
#from aiomultiprocess import Pool
import uvloop
asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())


from transaction_management.deribit.data_producer import (
    StreamAccountData,)
from transaction_management.deribit.running_strategies import executing_strategies
from transaction_management.deribit.user_chg import saving_and_relabelling_orders
from transaction_management.deribit.saving_result import saving_ws_data
from transaction_management.deribit.telegram_bot import (
    telegram_bot_sendtext,)
from utilities.system_tools import (
    async_raise_error_message,
    parse_error_message,
    SignalHandler)
        
def handle_ctrl_c(
    signum, 
    stack_frame
    )->None:
    
    sys.exit(0)
    
                  
#signal_handler = SignalHandler()

async def main2():
    
    """
        https://blog.finxter.com/python-multiprocessing-pool-ultimate-guide/

    """
    
    sub_account_id = "deribit-148510"
    
    try:
        
        queue: Queue = Manager().Queue()
        
        #processes = max(1,int (cpu_count() / 4) - 1)
        
        #maxtasksperchild=1
        
        stream = StreamAccountData(sub_account_id)
       
        producer_task = asyncio.create_task(stream.ws_manager(queue)) 
        
#        async with Pool(maxtasksperchild=2) as pool:
        async with Pool() as pool:

            while signal_handler.KEEP_PROCESSING:
       
                executing_strategies_tasks = [
                    asyncio.create_task(pool.apply(
                        executing_strategies, 
                        args=(sub_account_id,
                              queue
                              )
                        ))
                    ]
       
                await asyncio.gather(
                    *executing_strategies_tasks,
       
                    )
                
                await asyncio.sleep(0.0005)

                await producer_task
                
                pool.close()
                
                await pool.join()
            
    except Exception as error:
        log.critical (error)
        
        await async_raise_error_message(
            error,
            "WebSocket connection - failed to distribute_incremental_ticker_result_as_per_data_type",
        )
        
async def main():
    
    sub_account_id = "deribit-148510"
    
    try:
        
        queue: Queue = asyncio.Queue(maxsize=10)
        
        stream = StreamAccountData(sub_account_id)
       
        producer_task = asyncio.create_task(stream.ws_manager(queue)) 
        
        await asyncio.gather(
            producer_task, 
            
            executing_strategies(
                sub_account_id,
                queue),
            
            saving_and_relabelling_orders(
                sub_account_id,
                queue),
            
            saving_ws_data(
                sub_account_id,
                queue),
            
            )
        
    except Exception as error:
        
        parse_error_message(error)

if __name__ == "__main__":
    
    
    try:
        #signal.signal(signal.SIGINT, handle_ctrl_c) # terminate on ctrl-c
        
        uvloop.run(main())
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        
        asyncio.get_event_loop().run_until_complete(main().stop_ws())
        
    except Exception as error:
        parse_error_message(error)
        
        asyncio.run(telegram_bot_sendtext (
            error,
            "general_error"
            ))
