#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
from asyncio import Queue
import signal
import sys

# installed
import uvloop
from loguru import logger as log
import numpy as np
import redis.asyncio as aioredis
#from redistimeseries.client import Client

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

from data_cleaning.app_data_cleaning import reconciling_size
from data_cleaning.pruning_db import clean_up_databases
from messaging.telegram_bot import telegram_bot_sendtext
from strategies.app_future_spreads import future_spreads
from strategies.app_hedging_spot import hedging_spot
from strategies.relabelling_trading_result import relabelling_trades
from streaming_data.data_producer import StreamingAccountData
from transaction_management.deribit.api_requests import SendApiRequest
from transaction_management.deribit.avoiding_double_ids import \
    avoiding_double_ids
from market_understanding.price_action.candles_analysis import get_market_condition
from transaction_management.deribit.allocating_ohlc import updating_ohlc
from transaction_management.deribit.cancelling_active_orders import \
    cancelling_orders
from transaction_management.deribit.capturing_user_changes import \
    saving_and_relabelling_orders
from transaction_management.deribit.distributing_ws_data import caching_distributing_data
from transaction_management.deribit.managing_deribit import ModifyOrderDb
from transaction_management.deribit.processing_orders import \
    processing_orders
from transaction_management.deribit.updating_ticker import \
    update_cached_ticker
from utilities.system_tools import (
    SignalHandler,
    back_up_db,
    get_config_tomli,
    parse_error_message, 
    )


def handle_ctrl_c(
    signum, 
    stack_frame
    )->None:
    
    sys.exit(0)
    
                  
signal_handler = SignalHandler()

async def main():
    """
    https://redis-py.readthedocs.io/en/stable/examples/asyncio_examples.html
    """
    sub_account_id = "deribit-148510"

    # registering strategy config file    
    file_toml = "config_strategies.toml"
    
    try:

        private_data: object = SendApiRequest(sub_account_id)

        modify_order_and_db: object = ModifyOrderDb(sub_account_id)
        
        pool = aioredis.ConnectionPool.from_url(
            "redis://localhost", 
            port=6379, 
            db=0, 
            protocol=3, 
            decode_responses=True
            )
        
        client_redis: object = aioredis.Redis.from_pool(pool)
        
        # connecting to redis pubsub
        pubsub: object = client_redis.pubsub()
        
        
        # get redis channels
        receive_order_channel: str = redis_channels["receive_order"]
        market_analytics_channel: str = redis_channels["market_analytics_update"]
        ticker_cached_channel: str = redis_channels["ticker_update_cached"]
        portfolio_channel: str = redis_channels["portfolio"]
        my_trades_channel: str = redis_channels["my_trades"]
        sending_order_channel: str = redis_channels["sending_order"]
        sub_account_channel: str = redis_channels["sub_account_update"]
        order_allowed_channel: str = redis_channels["is_order_allowed"]

        # prepare channels placeholders
        channels = [
            market_analytics_channel,
            receive_order_channel,
            ticker_cached_channel,
            portfolio_channel,
            my_trades_channel,
            sub_account_channel,
            order_allowed_channel,
        ]
        
        # subscribe to channels
        [await pubsub.subscribe(o) for o in channels]
        
        message_byte = await pubsub.get_message()

        # parsing config file
        config_app = get_config_tomli(file_toml)

        # get tradable strategies
        tradable_config_app = config_app["tradable"]

        # get TRADABLE currencies
        currencies: list = [o["spot"] for o in tradable_config_app][0]

        strategy_attributes = config_app["strategies"]

        # get redis channels
        redis_channels: dict = config_app["redis_channels"][0]

        redis_keys: dict = config_app["redis_keys"][0]
        
        resolutions: list = [o["resolutions"] for o in tradable_config_app][0]

        strategy_attributes = config_app["strategies"]

        queue = Queue(maxsize=1)
        
        stream = StreamingAccountData(sub_account_id)
                
        producer_task = asyncio.create_task(
            stream.ws_manager(
                queue,
                currencies,
                resolutions,
                strategy_attributes)
            ) 
        
        saving_task = asyncio.create_task(
            caching_distributing_data(
                private_data,
                client_redis,
                currencies,
                redis_channels,
                redis_keys,
                queue,
                )
            ) 
        
        await asyncio.sleep(0.0005)
        
        """
                    
            future_spreads(
                currencies,
                client_redis,
                config_app,
                redis_channels,
                redis_keys,
                strategy_attributes,
                ),
            
            reconciling_size(
                modify_order_and_db,
                config_app,
                idle_time),                

            hedging_spot(
                currencies,
                client_redis,
                config_app,
                redis_channels,
                redis_keys,
                strategy_attributes,
                ),
      
            #scanning_volume()
                  
            """
            
        await asyncio.gather(
            producer_task, 
        
            saving_task,
            
        cancelling_orders(
                private_data,
                modify_order_and_db,
                currencies,
                client_redis,
                config_app,
                redis_channels,
                redis_keys,
                strategy_attributes,
                ),    

            processing_orders(
                modify_order_and_db,
                client_redis,
                config_app,
                ),
       
            saving_and_relabelling_orders(
                private_data,
                modify_order_and_db,
                client_redis,
                config_app,),
    
            avoiding_double_ids(
                modify_order_and_db,
                client_redis,
                config_app,
                ),
       
            relabelling_trades(
                modify_order_and_db,
                config_app),
            
            update_cached_ticker(
                client_redis,
                config_app),

            updating_ohlc(
                client_redis,
                redis_channels,),
            
            get_market_condition(
                client_redis,
                config_app,
                currencies,
                redis_channels,
                resolutions,
                np),
            
            
            back_up_db(60*10),
            
            clean_up_databases(60)
            
                        )  

        await queue.join()

    except Exception as error:
        
        parse_error_message(error)
        await telegram_bot_sendtext (
            f"app-{error}",
            "general_error"
            )

if __name__ == "__main__":
    
    try:
        signal.signal(signal.SIGINT, handle_ctrl_c) # terminate on ctrl-c
        
        uvloop.run(main())
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        
        asyncio.get_event_loop().run_until_complete(main())
        
    except Exception as error:
        parse_error_message(error)
        
        asyncio.run(telegram_bot_sendtext (
            error,
            "general_error"
            ))
