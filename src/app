#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
from asyncio import Queue
import os
import signal
import sys
from random import sample

# installed
import tomli
import uvloop
from loguru import logger as log

import redis
import orjson
from redis import ConnectionPool
import redis.asyncio as redis

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())


from configuration.label_numbering import get_now_unix_time
from data_cleaning.app_data_cleaning import reconciling_size
from market_understanding.scanning_volume_spike import scanning_volume
from messaging.telegram_bot import telegram_bot_sendtext
from strategies.app_future_spreads import future_spreads
from strategies.app_hedging_spot import hedging_spot
from strategies.relabelling_trading_result import relabelling_trades
from transaction_management.deribit.api_requests import SendApiRequest
from transaction_management.deribit.avoiding_double_ids import \
    avoiding_double_ids
from transaction_management.deribit.cancelling_active_orders import \
    cancelling_orders
from transaction_management.deribit.data_producer import StreamingAccountData
from transaction_management.deribit.managing_deribit import ModifyOrderDb
from transaction_management.deribit.running_strategies import \
    executing_strategies
from transaction_management.deribit.saving_result import saving_ws_data
from transaction_management.deribit.capturing_user_changes import \
    saving_and_relabelling_orders
from utilities.caching import combining_order_data
from utilities.caching import combining_ticker_data as cached_ticker
from utilities.caching import update_cached_orders, update_cached_ticker
from utilities.system_tools import (SignalHandler, async_raise_error_message,
                                    parse_error_message, provide_path_for_file,
                                    raise_error_message)


def handle_ctrl_c(
    signum, 
    stack_frame
    )->None:
    
    sys.exit(0)
    
                  
signal_handler = SignalHandler()


def get_config(file_name: str) -> list:
    """ """
    
    config_path = provide_path_for_file (file_name)
    
    try:
        if os.path.exists(config_path):
            with open(config_path, "rb") as handle:
                read= tomli.load(handle)
                return read
    except:
        return []

async def main():
    """
    https://redis-py.readthedocs.io/en/stable/examples/asyncio_examples.html
    """
    sub_account_id = "deribit-148510"

    # registering strategy config file    
    file_toml = "config_strategies.toml"
    
    idle_time = 2
    
    try:

        private_data: str = SendApiRequest(sub_account_id)

        modify_order_and_db: object = ModifyOrderDb(sub_account_id)

        r = redis.Redis()

        redis_pool = ConnectionPool(host="localhost", port=6379, db=0)
        client_redis = redis.Redis(connection_pool=redis_pool)
        
                
        pool = redis.ConnectionPool.from_url("redis://localhost", port=6379, protocol=3)
        client_redis = redis.Redis.from_pool(pool)

        #client_redis = redis.Redis()
            
        # parsing config file
        config_app = get_config(file_toml)

        queue = Queue(maxsize=1)
        
        stream = StreamingAccountData(sub_account_id)
                
        producer_task = asyncio.create_task(
            stream.ws_manager(
                config_app,
                queue)
            ) 
        
        saving_task = asyncio.create_task(
            saving_ws_data(
                private_data,
                modify_order_and_db,
                client_redis,
                config_app,
                queue,
                )
            ) 
        
        await asyncio.sleep(0.0005)
        
        """
                            
            #scanning_volume()
              
            """
            
        await asyncio.gather(
            producer_task, 
        
            saving_task,
                
    
            saving_task,
    
    
            hedging_spot(
                private_data,
                modify_order_and_db,
                client_redis,
                config_app,),

               
            #future_spreads(
            #    private_data,
            #    modify_order_and_db,
            #    client_redis,
            #    config_app,
            #    ),
            
            cancelling_orders(
                private_data,
                modify_order_and_db,
                client_redis,
                config_app
                ),    
                
            saving_and_relabelling_orders(
                private_data,
                modify_order_and_db,
                client_redis,
                config_app,),
    
      
            avoiding_double_ids(
                private_data,
                modify_order_and_db,
                client_redis,
                config_app,
                ),
       
            relabelling_trades(
                modify_order_and_db,
                config_app),
    
            reconciling_size(
                modify_order_and_db,
                config_app,
                idle_time),
    
                        )  

        await queue.join()

    except Exception as error:
        
        parse_error_message(error)
        await telegram_bot_sendtext (
            f"app-{error}",
            "general_error"
            )

if __name__ == "__main__":
    
    try:
        signal.signal(signal.SIGINT, handle_ctrl_c) # terminate on ctrl-c
        
        uvloop.run(main())
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        
        asyncio.get_event_loop().run_until_complete(main())
        
    except Exception as error:
        parse_error_message(error)
        
        asyncio.run(telegram_bot_sendtext (
            error,
            "general_error"
            ))
