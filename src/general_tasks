#!/usr/bin/python
# -*- coding: utf-8 -*-

import asyncio
import os

import httpx
from loguru import logger as log
import tomli

from configuration.label_numbering import get_now_unix_time
from data_cleaning.managing_closed_transactions import (
    clean_up_closed_transactions,
    get_unrecorded_trade_transactions,
    refill_db)
from data_cleaning.managing_delivered_transactions import (
    is_instrument_name_has_delivered,
    updating_delivered_instruments)
from data_cleaning.reconciling_db import(
    is_my_trades_and_sub_account_size_reconciled_each_other,
    reconciling_orders)
from data_cleaning.pruning_db import count_and_delete_ohlc_rows
from db_management.sqlite_management import (
    back_up_db_sqlite,
    deleting_row,
    executing_query_with_return,
    insert_tables, 
    querying_arithmetic_operator,
    querying_duplicated_transactions,
    update_status_data)
from market_understanding.technical_analysis import (
    insert_market_condition_result)
from strategies.cash_carry.reassigning_labels import (
    pairing_single_label,
    relabelling_double_ids)
from transaction_management.deribit.api_requests import (
    get_currencies,
    get_instruments,)
from transaction_management.deribit.get_instrument_summary import (
    get_futures_instruments,)
from transaction_management.deribit.managing_deribit import (
    ModifyOrderDb,)
from transaction_management.deribit.telegram_bot import (
    telegram_bot_sendtext,)
from utilities.pickling import (
    read_data,
    replace_data,)
from utilities.string_modification import (
    extract_currency_from_text,
    remove_double_brackets_in_list,
    remove_redundant_elements,
    transform_nested_dict_to_list,)
from utilities.system_tools import (
    async_raise_error_message,
    kill_process,
    provide_path_for_file,
    raise_error_message,
    sleep_and_restart)
from websocket_management.allocating_ohlc import (
    ohlc_end_point, 
    ohlc_result_per_time_frame,
    last_tick_fr_sqlite,)
    
def get_config(file_name: str) -> list:
    """ """
    config_path = provide_path_for_file (file_name)
    
    try:
        if os.path.exists(config_path):
            with open(config_path, "rb") as handle:
                read= tomli.load(handle)
                return read
    except:
        return []

def check_cpu_usage(threshold):
    
    import psutil
    import smtplib

    cpu_usage = psutil.cpu_percent()
    if cpu_usage > threshold:
        send_alert(f"CPU usage is too high: {cpu_usage}%")
    
def get_settlement_period (strategy_attributes) -> list:
    
    return (remove_redundant_elements(
        remove_double_brackets_in_list(
            [o["settlement_period"]for o in strategy_attributes]))
            )

def reading_from_pkl_data(
    end_point, 
    currency,
    status: str = None
    ) -> dict:
    """ """

    path: str = provide_path_for_file (end_point,
                                      currency,
                                      status)

    return read_data(path)


async def back_up_db(idle_time):
    extensions = ('.bak')
    
    while True:

        folder_path = "databases/"

        try:
            file_list = os.listdir(folder_path)
                        
            for currentFile in file_list:
                #log.error(currentFile)
                if ".bak" in currentFile:
                    os.remove(f"{folder_path}{currentFile}")
            await back_up_db_sqlite ()
            
        except Exception as error:
            await raise_error_message(error)
            
        await asyncio.sleep(idle_time)
    

async def get_currencies_from_deribit() -> float:
    """ """

    return await get_currencies()


async def get_instruments_from_deribit(currency) -> float:
    """ """

    result = await get_instruments(currency)

    return result


async def clean_up_databases(idle_time) -> None:
    """ """

    while True:
                    
        log.critical("count_and_delete_ohlc_rows-START")
        tables = ["market_analytics_json", 
                #"account_summary_json", 
                "ohlc1_eth_perp_json", 
                "ohlc1_btc_perp_json", 
                "ohlc15_eth_perp_json", 
                "ohlc15_btc_perp_json", 
                "ohlc30_eth_perp_json", 
                "ohlc60_eth_perp_json",
                "ohlc3_eth_perp_json", 
                "ohlc3_btc_perp_json", 
                "ohlc5_eth_perp_json", 
                "ohlc5_btc_perp_json",]
        
        database: str = "databases/trading.sqlite3"  

        for table in tables:
                
            await count_and_delete_ohlc_rows(
                database,
                table
                )
        
        await asyncio.sleep(idle_time)


async def update_ohlc_and_market_condition(
    tradable_config_app,
    idle_time
    ) -> None:
    """ """   

    ONE_PCT = 1 / 100
    WINDOW = 9
    RATIO = 0.9
    THRESHOLD = 0.01 * ONE_PCT
    try:
        
        currencies = [o["spot"] for o in tradable_config_app] [0]
        end_timestamp =     get_now_unix_time() 
        
        while True:
                
            for currency in currencies:
                
                instrument_name= f"{currency}-PERPETUAL"

                await insert_market_condition_result(
                    instrument_name, 
                    WINDOW, 
                    RATIO)
                
                time_frame= [3,5,15,60,30,"1D"]
                    
                ONE_SECOND = 1000
                
                one_minute = ONE_SECOND * 60
                
                WHERE_FILTER_TICK: str = "tick"
                
                for resolution in time_frame:
                    
                    table_ohlc= f"ohlc{resolution}_{currency.lower()}_perp_json" 
                                
                    last_tick_query_ohlc_resolution: str = querying_arithmetic_operator (
                        WHERE_FILTER_TICK, 
                        "MAX",
                        table_ohlc
                        )
                    
                    start_timestamp: int = await last_tick_fr_sqlite (last_tick_query_ohlc_resolution)
                    
                    if resolution == "1D":
                        delta= (end_timestamp - start_timestamp)/(one_minute * 60 * 24)
                
                    else:
                        delta= (end_timestamp - start_timestamp)/(one_minute * resolution)
                                
                    if delta > 1:
                        end_point = ohlc_end_point(instrument_name,
                                        resolution,
                                        start_timestamp,
                                        end_timestamp,
                                        )
                        
                        with httpx.Client() as client:
                            ohlc_request = client.get(
                                end_point, 
                                follow_redirects=True
                                ).json()["result"]
                        
                        result = [o for o in transform_nested_dict_to_list(ohlc_request) \
                            if o["tick"] > start_timestamp][0]

                        await ohlc_result_per_time_frame (
                            instrument_name,
                            resolution,
                            result,
                            table_ohlc,
                            WHERE_FILTER_TICK, 
                            )

                        await insert_tables(
                            table_ohlc, 
                            result
                            )
            
            await asyncio.sleep(idle_time)
    
    except Exception as error:
        await raise_error_message(error)

async def get_instruments_from_deribit(currency) -> float:
    """ """

    result = await get_instruments(currency)

    return result

async def update_instruments_per_currency(currency):

    instruments = await get_instruments_from_deribit(currency)

    my_path_instruments = provide_path_for_file("instruments", 
                                                currency)

    replace_data(
        my_path_instruments,
        instruments
        )
    
async def update_instruments(idle_time):

    try:
        
        while True:

            get_currencies_all = await get_currencies_from_deribit()
                        
            currencies = [o["currency"] for o in get_currencies_all["result"]]

            for currency in currencies:

                await update_instruments_per_currency(currency)

            my_path_cur = provide_path_for_file("currencies")

            replace_data(
                my_path_cur,
                currencies
                )
            
            await asyncio.sleep(idle_time)

    except Exception as error:
        await async_raise_error_message(error)

    
async def reconciling_size(
    sub_account_id: str,
    config_app: list,
    idle_time: int
    ) -> None:

                
    try:
        # get tradable strategies
        tradable_config_app = config_app["tradable"]
        
        # get tradable currencies
        currencies= [o["spot"] for o in tradable_config_app] [0]

        modify_order_and_db = ModifyOrderDb(sub_account_id)
        
        strategy_attributes = config_app["strategies"]

        relevant_tables = config_app["relevant_tables"][0]
        
        trade_db_table= relevant_tables["my_trades_table"]
        
        order_db_table= relevant_tables["orders_table"]        
            
        server_time_fixed = get_now_unix_time()  
            
        while True:
            
            server_time = get_now_unix_time()  
                                
            for currency in currencies:
                
                sub_account = reading_from_pkl_data(
                    "sub_accounts",
                    currency)
                
                sub_account = [] if not sub_account else sub_account[0]
                
                if sub_account:
                
                    currency_lower = currency.lower ()
                    
                    archive_db_table = f"my_trades_all_{currency_lower}_json"                    
                                            
                    query_trades = f"SELECT * FROM  v_{currency_lower}_trading"
                    query_log = f"SELECT * FROM  v_{currency_lower}_transaction_log"

                    query_orders = f"SELECT * FROM  v_{currency_lower}_orders"
                    
                    orders_currency = await executing_query_with_return (query_orders)  
        
                    reconciliation_direction = ["from_sub_account_to_order_db","from_order_db_to_sub_account"]
                    for  direction in reconciliation_direction:
                        await reconciling_orders(
                            modify_order_and_db,
                            sub_account,
                            orders_currency,
                            direction,
                            order_db_table
                        )
                                            
                    my_trades_currency_all_transactions: list= await executing_query_with_return (query_trades)
                                                                    
                    my_trades_currency_active: list= [o for o in my_trades_currency_all_transactions\
                        if o["is_open"] == 1]

                    from_transaction_log = await executing_query_with_return (query_log)                  

                    sub_account_positions = sub_account["positions"]
                    
                    sub_account_positions_instrument = remove_redundant_elements(
                        [o["instrument_name"] for o in sub_account_positions ]
                        )
                    
                    my_trades_currency_active_free_blanks = [o for o in my_trades_currency_active\
                        if o["label"] is not None]

                    if my_trades_currency_active:
                        
                        pairing_label = await pairing_single_label(
                        strategy_attributes,
                        trade_db_table,
                        archive_db_table,
                        my_trades_currency_active,
                        server_time 
                        )
                            
                        duplicated_trade_id_transactions = await querying_duplicated_transactions(
                            archive_db_table,"trade_id"
                        )
                        
                        if duplicated_trade_id_transactions:
                            
                            log.critical (f"duplicated_trade_id_transactions {duplicated_trade_id_transactions}")

                            ids = [o["id"] for o in duplicated_trade_id_transactions]
                            
                            for id in ids:
                                await deleting_row(
                                archive_db_table,
                                "databases/trading.sqlite3",
                                "id",
                                "=",
                                id,)
                                
                                break
                            
                            await sleep_and_restart()
                            
                        if  pairing_label:
                            
                            log.error (f"pairing_label {pairing_label}")
                            
                            cancellable_strategies =   [o["strategy_label"] for o in strategy_attributes \
                                if o["cancellable"]==True]
                            
                            await modify_order_and_db.cancel_the_cancellables(
                                order_db_table,
                                currency,
                                cancellable_strategies
                                )

                    # FROM sub account to other db's
                    if  sub_account_positions_instrument:
                        
                        # sub account instruments
                        for instrument_name in sub_account_positions_instrument:
                            
                            #eliminating combo transactions as they're not recorded in the book
                            if "-FS-" not in instrument_name:
                                    
                                my_trades_and_sub_account_size_reconciled_archive = is_my_trades_and_sub_account_size_reconciled_each_other(
                                            instrument_name,
                                            my_trades_currency_active,
                                            sub_account
                                            )  
                                
                                if  not my_trades_and_sub_account_size_reconciled_archive:
                                    
                                    my_trades_instrument_name_archive = [o for o in my_trades_currency_all_transactions\
                                        if instrument_name in o["instrument_name"]]
                                    
                                    timestamp_log = min(
                                        [o["timestamp"] for o in my_trades_instrument_name_archive]
                                        )
                                    
                                    log.critical(f"timestamp_log {timestamp_log}")
                                                                        
                                    await modify_order_and_db.update_trades_from_exchange_based_on_latest_timestamp (
                                        instrument_name,
                                        timestamp_log-10, # - x: arbitrary, timestamp in trade and transaction_log not always identical each other
                                        archive_db_table,
                                        trade_db_table,
                                        order_db_table,
                                        1000
                                        )
                                    
                    settlement_periods = get_settlement_period (strategy_attributes)
                    
                    futures_instruments = get_futures_instruments (
                    currencies,
                    settlement_periods
                    )  
                    
                    min_expiration_timestamp = futures_instruments["min_expiration_timestamp"] 
                    
                    instrument_attributes_futures_all = futures_instruments["active_futures"]     
                                                                                                        
                    delta_time_expiration = min_expiration_timestamp - server_time  
                                                        
                    expired_instrument_name = [o["instrument_name"]  for o in instrument_attributes_futures_all \
                        if o ["expiration_timestamp"] == min_expiration_timestamp]
                                                                    
                    for instrument_name in expired_instrument_name:
                        
                        if delta_time_expiration < 0:
                            
                            await update_instruments_per_currency(currency)
                            
                            await updating_delivered_instruments(
                                archive_db_table,
                                instrument_name)
                                        
                    my_trades_instruments = ([ o for o in my_trades_currency_active ]
                                        )
                    my_trades_instruments_name = remove_redundant_elements(
                                        [o["instrument_name"] for o in my_trades_instruments ]
                                        )
                    
                    for my_trade_instrument in my_trades_instruments_name:
                        
                        instrument_name_has_delivered = is_instrument_name_has_delivered(
                            my_trade_instrument,
                            instrument_attributes_futures_all,)
                        
                        log.debug (f"instrument_name_has_delivered {instrument_name_has_delivered}")
                        
                        if instrument_name_has_delivered:
                            
                            await updating_delivered_instruments(
                                archive_db_table,
                                my_trade_instrument)
             
                            await update_instruments_per_currency(currency)
                            
                            log.debug (f" inactive instrument_name {my_trade_instrument}")
                            
                            query_log = f"SELECT * FROM  v_{currency_lower}_transaction_log_type"
                            from_transaction_log = await executing_query_with_return (query_log)  
                            
                            #! need to be completed to compute rl from instrument name               

                            from_transaction_log_instrument_name = ([o for o in from_transaction_log\
                                if o["instrument_name"] == my_trade_instrument])  
                                        
                            unrecorded_timestamp_from_transaction_log = get_unrecorded_trade_transactions(
                                            "delivered",
                                            my_trades_currency_all_transactions,
                                            from_transaction_log_instrument_name
                                            )
                            
                            if unrecorded_timestamp_from_transaction_log:
                                
                                await modify_order_and_db.update_trades_from_exchange_based_on_latest_timestamp (
                                            my_trade_instrument,
                                            unrecorded_timestamp_from_transaction_log-10, # - x: arbitrary, timestamp in trade and transaction_log not always identical each other
                                            archive_db_table,
                                            trade_db_table,
                                            5
                                            )    
                                
                                await updating_delivered_instruments(
                                    archive_db_table,
                                    my_trade_instrument)
    
                                            
                                break

                    # handling transactions with no label                    
                    await refill_db(
                        currency,
                        my_trades_currency_active,
                        archive_db_table,
                            )
                
                    await clean_up_closed_transactions(
                        currency, 
                        archive_db_table,
                        my_trades_currency_active
                        )
                    
                    #relabelling = await relabelling_double_ids(
                    #    trade_db_table,
                    #    archive_db_table,
                    #    my_trades_currency_active_free_blanks,
                    #    )
                    
                    if  False:# and relabelling:
                        
                        log.error (f"relabelling {relabelling}")
                        
                        cancellable_strategies =   [o["strategy_label"] for o in strategy_attributes \
                            if o["cancellable"]==True]
                        
                        await modify_order_and_db.cancel_the_cancellables(
                            order_db_table,
                            currency,
                            cancellable_strategies)
            
            time_elapsed = (server_time - server_time_fixed)/1000
            
            if time_elapsed > 15 * 60 :
                
                kill_process("general_tasks")
                               
            await asyncio.sleep(idle_time)
            
            
    except Exception as error:
        await async_raise_error_message(error)
        await telegram_bot_sendtext (
                    error,
                    "general_error")
            

async def main():
    
    sub_account_id = "deribit-148510"    
    
    # registering strategy config file    
    file_toml = "config_strategies.toml"
    
    # parsing config file
    config_app = get_config(file_toml)

    # get tradable strategies
    tradable_config_app = config_app["tradable"]
    
    try:
        await asyncio.gather(
            
        reconciling_size(
            sub_account_id,
            config_app,
            2
            ),
        
        #downloading_sub_account(
        #    sub_account_id,
        ##   config_app,
        #    30
        #    ),
    
        update_ohlc_and_market_condition(
            tradable_config_app, 
            15), 
        
        back_up_db(60*10),
        
        clean_up_databases(60), 
        
        update_instruments(60),
        
        return_exceptions=True)
    
    except Exception as error:
        await telegram_bot_sendtext (
                    error,
                    "general_error")
        await async_raise_error_message(error)
                
if __name__ == "__main__":
    
    try:
        #asyncio.run(main())
        asyncio.run(main())
        
    except (KeyboardInterrupt, SystemExit):
        asyncio.get_event_loop().run_until_complete(main().stop_ws())
        

    except Exception as error:
        raise_error_message(
        error, 
        10, 
        "app"
        )

    