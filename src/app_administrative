#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
import signal
import sys

# installed
import uvloop
import redis.asyncio as aioredis

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

from data_cleaning import pruning_db
from streaming_helper.data_announcer.telegram import relaying_message
from streaming_helper.utilities import error_handling,system_tools
from configuration import config

def handle_ctrl_c(
    signum, 
    stack_frame
    )->None:
    
    sys.exit(0)
                  
signal_handler = system_tools.SignalHandler()

async def main():
    """
    """
    sub_account_id = "telegram-general_error"
    
    pool = aioredis.ConnectionPool.from_url(
        "redis://localhost", 
        port=6379, 
        db=0, 
        protocol=3, 
        encoding="utf-8",
        decode_responses=True
        )
    
    client_redis: object = aioredis.Redis.from_pool(pool)
                
    # registering strategy config file    
    file_toml = "config_strategies.toml"

    try:

        # parsing config file
        config_app = system_tools.get_config_tomli(file_toml)

        config_path = system_tools.provide_path_for_file(".env")
    
        parsed= config.main_dotenv(
            sub_account_id,
            config_path,
        )
        
        client_id: str = parsed["bot_token"]
        client_secret: str= parsed["bot_chatID"]

        # get redis channels
        redis_channels: dict = config_app["redis_channels"][0]

        relayer = asyncio.create_task(
            relaying_message.telegram_messaging(
                client_redis,
                client_id,
                client_secret,    
                redis_channels,                
                )
            )                
        
        await asyncio.sleep(0.0005)
        
        await asyncio.gather(
            
            relayer, 
            
            system_tools.back_up_db(60*10),
            
            pruning_db.clean_up_databases(60)
            )  

    except Exception as error:        
        
        await error_handling.parse_error_message_with_redis(
            client_redis,
            error,
        )   

if __name__ == "__main__":
    
    try:
        signal.signal(signal.SIGINT, handle_ctrl_c) # terminate on ctrl-c
        
        uvloop.run(main())
        
    except(
        KeyboardInterrupt, 
        SystemExit,
        ):
        
        asyncio.get_event_loop().run_until_complete(main())
        
    except Exception as error:
        error_handling.parse_error_message(error)
        
