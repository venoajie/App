#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
from datetime import datetime, timedelta, timezone
import os

# installed
from dataclassy import dataclass, fields
import json
from loguru import logger as log
import orjson
import tomli
import websockets

# user defined formula
from configuration import id_numbering, config
from db_management.sqlite_management import (
    executing_query_based_on_currency_or_instrument_and_strategy as get_query,
    insert_tables,)
from strategies.basic_strategy import(
    is_label_and_side_consistent,)
from transaction_management.deribit.api_requests import (
    get_currencies,
    get_instruments,)
from transaction_management.deribit.telegram_bot import (
    telegram_bot_sendtext,)
from transaction_management.deribit.orders_management import (
    saving_traded_orders,
    saving_orders,)
from utilities.pickling import (
    read_data,
    replace_data,)
from utilities.system_tools import (
    provide_path_for_file,
    async_raise_error_message,
    raise_error_message,)
from utilities.string_modification import (
    extract_currency_from_text,
    remove_double_brackets_in_list,
    remove_redundant_elements,)
from websocket_management.allocating_ohlc import (
    ohlc_result_per_time_frame,
    inserting_open_interest,)
from websocket_management.ws_management import (
    get_futures_instruments,)
from transaction_management.deribit.managing_deribit import (
    ModifyOrderDb,
    currency_inline_with_database_address,)
from websocket_management.cleaning_up_transactions import (
    clean_up_closed_transactions,)


def parse_dotenv (sub_account) -> dict:
    return config.main_dotenv(sub_account)

def get_config(file_name: str) -> list:
    """ """
    config_path = provide_path_for_file (file_name)
    
    try:
        if os.path.exists(config_path):
            with open(config_path, "rb") as handle:
                read= tomli.load(handle)
                return read
    except:
        return []



async def update_db_pkl(
    path, 
    data_orders,
    currency
    ) -> None:

    my_path_portfolio = provide_path_for_file (path,
                                               currency)
        
    if currency_inline_with_database_address(
        currency,
        my_path_portfolio):
        
        replace_data (
            my_path_portfolio, 
            data_orders
            )

def get_settlement_period (strategy_attributes) -> list:
    
    return (remove_redundant_elements(
        remove_double_brackets_in_list(
            [o["settlement_period"]for o in strategy_attributes]))
            )

        
@dataclass(unsafe_hash=True, slots=True)
class StreamAccountData(ModifyOrderDb):

    """

    +----------------------------------------------------------------------------------------------+
    referene: https://github.com/ElliotP123/crypto-exchange-code-samples/blob/master/deribit/websockets/dbt-ws-authenticated-example.py
    +----------------------------------------------------------------------------------------------+

    """

    sub_account_id: str
    client_id: str = fields 
    client_secret: str = fields 
    modify_order_and_db: object = fields 
    # Async Event Loop
    loop = asyncio.get_event_loop()
    ws_connection_url: str = "wss://www.deribit.com/ws/api/v2"
    # Instance Variables
    connection_url: str = "https://www.deribit.com/api/v2/"
    websocket_client: websockets.WebSocketClientProtocol = None
    refresh_token: str = None
    refresh_token_expiry_time: int = None
            
    def __post_init__(self):
        self.modify_order_and_db: str = ModifyOrderDb(self.sub_account_id)
        self.client_id: str = parse_dotenv(self.sub_account_id)["client_id"]
        self.client_secret: str = parse_dotenv(self.sub_account_id)["client_secret"]

        # Start Primary Coroutine
        self.loop.run_until_complete(self.ws_manager())
    
    async def ws_manager(self) -> None:
        async with websockets.connect(
            self.ws_connection_url,
            ping_interval=None,
            compression=None,
            close_timeout=60,
        ) as self.websocket_client:
            
            # registering strategy config file    
            file_toml = "config_strategies.toml"

            try:                    
                
                # get ALL traded currencies in deribit
                get_currencies_all = await get_currencies()

                currencies = [o["currency"] for o in get_currencies_all["result"]]

                for currency in currencies:

                    instruments = await get_instruments(currency)

                    my_path_instruments = provide_path_for_file("instruments", 
                                                                currency)

                    replace_data(
                        my_path_instruments,
                        instruments
                        )

                my_path_cur = provide_path_for_file("currencies")

                replace_data(
                    my_path_cur,
                    currencies
                    )
                
                # parsing config file
                config_app = get_config(file_toml)

                # get tradable strategies
                tradable_config_app = config_app["tradable"]
                
                # get TRADABLE currencies
                currencies = [o["spot"] for o in tradable_config_app] [0]
                
                strategy_attributes = config_app["strategies"]
                
                # get strategies that have not short/long attributes in the label 
                non_checked_strategies =   [o["strategy_label"] for o in strategy_attributes \
                    if o["non_checked_for_size_label_consistency"]==True]
                
                trade_db_table= "my_trades_all_json"
                
                order_db_table= "orders_all_json"         
                                
                settlement_periods = get_settlement_period (strategy_attributes)
                                
                futures_instruments =  get_futures_instruments (
                    currencies,
                    settlement_periods)  
                
                instruments_name = futures_instruments["instruments_name"]   
                                
                resolution = 1                
                
                while True:
                    
                    # Authenticate WebSocket Connection
                    await self.ws_auth()

                    # Establish Heartbeat
                    await self.establish_heartbeat()

                    # Start Authentication Refresh Task
                    self.loop.create_task(self.ws_refresh_auth())
                    
                    for currency in currencies:
                        
                        # some pre-trading checks
                        currency_lower = currency.lower ()
                        archive_db_table= f"my_trades_all_{currency_lower}_json"                    
                        transaction_log_trading= f"transaction_log_{currency_lower}_json"
                        
                        await self.modify_order_and_db.resupply_sub_accountdb (currency)

                        await self.modify_order_and_db.resupply_portfolio (currency)
                  
                        column_trade: str= "instrument_name","label"
                        my_trades_currency: list= await get_query(
                            trade_db_table, 
                            currency, 
                            "all", 
                            "all", 
                            column_trade
                            )
                        
                        my_trades_instrument_name_only = remove_redundant_elements(
                            [o["instrument_name"] for o in my_trades_currency]
                            )
                            
                        if my_trades_instrument_name_only:

                            for instrument_name in my_trades_instrument_name_only:
                                await clean_up_closed_transactions(
                                    instrument_name, 
                                    trade_db_table
                                            )      
                                                        
                                await self.modify_order_and_db.resupply_transaction_log(
                                    currency,
                                    transaction_log_trading,
                                    instrument_name,
                                    3
                                    )
                                
                                await asyncio.sleep(.1)
                                
                            
                        ws_channel_currency = [
                            f"user.portfolio.{currency}",
                            f"user.changes.any.{currency.upper()}.raw",
                            ]
                    
                        for ws in ws_channel_currency:

                            self.loop.create_task(
                                self.ws_operation(
                                    operation = "subscribe", 
                                    ws_channel = ws)
                                )
                      
                    for instrument in instruments_name:
                                            
                        ws_channel_instrument = [
                            f"incremental_ticker.{instrument}",
                            f"chart.trades.{instrument}.{resolution}"
                            ]
                        
                        for ws in ws_channel_instrument:
                            self.loop.create_task(
                            self.ws_operation(
                                operation = "subscribe",
                                ws_channel = ws,
                            ))
                    
                    while self.websocket_client.open:
                        
                        try:
                                
                            # Receive WebSocket messages
                            message: bytes = await self.websocket_client.recv()
                            message: dict = orjson.loads(message)
                            message_channel: str = None
                            #log.warning (message)
                            if "id" in list(message):
                                if message["id"] == 9929:
                                    
                                    if self.refresh_token is None:
                                        log.info ("Successfully authenticated WebSocket Connection")

                                    else:
                                        log.info ("Successfully refreshed the authentication of the WebSocket Connection")

                                    self.refresh_token = message["result"]["refresh_token"]

                                    # Refresh Authentication well before the required datetime
                                    if message["testnet"]:
                                        expires_in: int = 300
                                    else:
                                        expires_in: int = message["result"]["expires_in"] - 240

                                    now_utc = datetime.now(timezone.utc)
                                    
                                    self.refresh_token_expiry_time = now_utc + timedelta(
                                        seconds=expires_in
                                    )

                                elif message["id"] == 8212:
                                    # Avoid logging Heartbeat messages
                                    continue

                            elif "method" in list(message):
                                # Respond to Heartbeat Message
                                if message["method"] == "heartbeat":
                                    await self.heartbeat_response()

                            if "params" in list(message):
                                
                                if message["method"] != "heartbeat":
                                    message_channel = message["params"]["channel"]

                                    data_orders: list = message["params"]["data"]    
                                    
                                    currency: str = extract_currency_from_text(message_channel)
                                    
                                    currency_lower = currency
                                                                        
                                    archive_db_table= f"my_trades_all_{currency_lower}_json"
                                    
                                    transaction_log_trading= f"transaction_log_{currency_lower}_json"

                                    if message_channel == f"user.portfolio.{currency.lower()}":
                                        # also always performed at restart                                
                                        await update_db_pkl(
                                            "portfolio", 
                                            data_orders, 
                                            currency
                                            )
                        
                                        await self.modify_order_and_db.resupply_sub_accountdb(currency)    
                                        
                                    if "user.changes.any" in message_channel:
                                        
                                        await self.update_user_changes(
                                            non_checked_strategies,
                                            data_orders, 
                                            currency, 
                                            order_db_table,
                                            trade_db_table, 
                                            archive_db_table,
                                            )          
                                                                  
                                    
                                    TABLE_OHLC1: str = f"ohlc{resolution}_{currency_lower}_perp_json"
                                    WHERE_FILTER_TICK: str = "tick"
                                    DATABASE: str = "databases/trading.sqlite3"
                                    
                                    if "chart.trades" in message_channel:
                                        instrument_ticker = ((message_channel)[13:]).partition('.')[0] 
                                                                                                    
                                        await ohlc_result_per_time_frame(
                                            instrument_ticker,
                                            resolution,
                                            data_orders,
                                            TABLE_OHLC1,
                                            WHERE_FILTER_TICK,
                                            )
                                        
                                    instrument_ticker = (message_channel)[19:]  
                                    
                                    if (
                                        message_channel
                                        == f"incremental_ticker.{instrument_ticker}"):
                                        
                                        my_path_ticker = provide_path_for_file(
                                            "ticker", instrument_ticker)
                                        
                                        await distribute_ticker_result_as_per_data_type(
                                            my_path_ticker, data_orders, instrument_ticker)
                                                
                                    
                                        if "PERPETUAL" in data_orders["instrument_name"]:
                                            
                                            await inserting_open_interest(
                                                currency, 
                                                WHERE_FILTER_TICK, 
                                                TABLE_OHLC1, 
                                                data_orders
                                                )                                                
                                                                                        
                        except Exception as error:
                            log.critical (error)
                            await telegram_bot_sendtext (
                                error,
                                "general_error"
                                )
                            await async_raise_error_message(error)

                    
            except Exception as error:
                log.critical (error)
                await telegram_bot_sendtext (
                    error,
                    "general_error")
                await raise_error_message (error)
                
    async def establish_heartbeat(self) -> None:
        """
        Requests DBT's `public/set_heartbeat` to
        establish a heartbeat connection.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 9098,
            "method": "public/set_heartbeat",
            "params": {"interval": 10},
        }

        try:        
            await self.websocket_client.send(json.dumps(msg))
        except Exception as error:
            log.warning(error)

    async def heartbeat_response(self) -> None:
        """
        Sends the required WebSocket response to
        the Deribit API Heartbeat message.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 8212,
            "method": "public/test",
            "params": {},
        }
        
        try:
            await self.websocket_client.send(json.dumps(msg))
        except Exception as error:
            log.warning(error)

    async def ws_auth(self) -> None:
        """
        Requests DBT's `public/auth` to
        authenticate the WebSocket Connection.
        """
        msg: dict = {
            "jsonrpc": "2.0",
            "id": 9929,
            "method": "public/auth",
            "params": {
                "grant_type": "client_credentials",
                "client_id": self.client_id,
                "client_secret": self.client_secret,
            },
        }
        
        
        await self.websocket_client.send(json.dumps(msg))

    async def ws_refresh_auth(self) -> None:
        """
        Requests DBT's `public/auth` to refresh
        the WebSocket Connection's authentication.
        """
        while True:
            now_utc = datetime.now(timezone.utc)
            if self.refresh_token_expiry_time is not None:
                if now_utc > self.refresh_token_expiry_time:
                    
                    msg: dict = {
                        "jsonrpc": "2.0",
                        "id": 9929,
                        "method": "public/auth",
                        "params": {
                            "grant_type": "refresh_token",
                            "refresh_token": self.refresh_token,
                        },
                    }
        
                    await self.websocket_client.send(json.dumps(msg))

            await asyncio.sleep(150)

    async def ws_operation(
        self, 
        operation: str, 
        ws_channel: str, 
        id: int = 100
    ) -> None:
        """
        Requests `public/subscribe` or `public/unsubscribe`
        to DBT's API for the specific WebSocket Channel.
        """
        sleep_time: int = 5
        
        await asyncio.sleep(sleep_time)

        id = id_numbering.id(operation, ws_channel)

        msg: dict = {
            "jsonrpc": "2.0",
            "method": f"private/{operation}",
            "id": id,
            "params": {"channels": [ws_channel]},
        }

        #log.info(ws_channel)
        await self.websocket_client.send(json.dumps(msg))


    async def update_user_changes(
        self,
        non_checked_strategies,
        data_orders, 
        currency, 
        order_db_table,
        trade_db_table,
        archive_db_table,
        ) -> None:
        
        trades = data_orders["trades"]
        
        orders = data_orders["orders"]

        instrument_name = data_orders["instrument_name"]
        
        log.critical (f"update_user_changes {instrument_name} -START")
        
        log.info (f" {data_orders}")
        
        if orders:
            
            if trades:
                for trade in trades:
                
                    if f"{currency.upper()}-FS-" not in instrument_name:
                    
                        await saving_traded_orders(
                            trade,
                            trade_db_table,
                            order_db_table
                            )                      

                        await saving_traded_orders(
                            trade, 
                            archive_db_table, 
                            order_db_table
                            )
                        
                await clean_up_closed_transactions(
                    instrument_name, 
                    trade_db_table
                    )
                   
                await self.modify_order_and_db.cancel_all_orders()    
                
            else:
                for order in orders:
                    
                    await self.saving_order(
                        non_checked_strategies,
                        instrument_name,
                        order,
                        order_db_table
                        )
                                            
                await self.modify_order_and_db. resupply_sub_accountdb(currency)               

        await update_db_pkl(
            "positions", 
            data_orders,
            currency)
        
        log.info(f"update_user_changes-END")
    

    async def saving_order (
        self,
        non_checked_strategies,
        instrument_name,
        order,
        order_db_table
        ) -> None:

                    
        order_state= order["order_state"]

        if order_state == "cancelled" or order_state == "filled":
            await saving_orders (
                order_db_table,
                order
                )
        
        else:
            
            label= order["label"]

            order_id= order["order_id"]    
            
            label_and_side_consistent= is_label_and_side_consistent(
                non_checked_strategies,
                order)
            
            if label_and_side_consistent and label:
                
                await saving_orders (
                    order_db_table, 
                    order
                    )
                
            # check if transaction has label. Provide one if not any
            if  not label_and_side_consistent:
            
                await insert_tables(
                    order_db_table, 
                    order
                    )

                await self.modify_order_and_db. cancel_by_order_id (order_id)                    
            
                await telegram_bot_sendtext(
                    "size or open order is inconsistent",
                    "general_error")

    
async def distribute_ticker_result_as_per_data_type(
    my_path_ticker: str, 
    data_orders: dict, 
    instrument_name: str
    ) -> None:
    """ """

    try:
        # ticker: list = pickling.read_data(my_path_ticker)

        if data_orders["type"] == "snapshot":
            replace_data(
                my_path_ticker, 
                data_orders
                )

            # ticker_fr_snapshot: list = pickling.read_data(my_path_ticker)

        else:
            ticker_change: list = read_data(my_path_ticker)
            if ticker_change != []:
                # log.debug (ticker_change)

                for item in data_orders:
                    ticker_change[0][item] = data_orders[item]
                    replace_data(
                        my_path_ticker, 
                        ticker_change
                        )

    except Exception as error:
        
        log.critical (error)

        await telegram_bot_sendtext (
            error,
            "general_error"
            )
        await async_raise_error_message(
            error,
            "WebSocket connection - failed to distribute_incremental_ticker_result_as_per_data_type",
        )


def main():
    # https://www.codementor.io/@jflevesque/python-asynchronous-programming-with-asyncio-library-eq93hghoc
    sub_account_id = "deribit-148510"
    
    try:
        StreamAccountData(sub_account_id)

    except Exception as error:
        log.critical (error)
        raise_error_message (
            error, 
            3,
            "app"
            )
                
if __name__ == "__main__":
    
    try:
        main()
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        asyncio.get_event_loop().run_until_complete(main().stop_ws())
        
    except Exception as error:
        log.critical (error)
        asyncio. telegram_bot_sendtext (
            error,
            "general_error"
            )
        raise_error_message(
        error, 
        3, 
        "app"
        )
