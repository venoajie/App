#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
from asyncio import Queue
import signal
import sys

# installed
import uvloop
import redis.asyncio as aioredis
#from redistimeseries.client import Client

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

from data_cleaning.pruning_db import clean_up_databases
from messaging.telegram_bot import telegram_bot_sendtext
from streaming_data.binance_top_movers import StreamingTopMoversData
from transaction_management.deribit.api_requests import (
    get_currencies,
    get_instruments,
    SendApiRequest,
)

from transaction_management.deribit.cancelling_active_orders import (
    cancel_the_cancellables,
)
from transaction_management.deribit.get_instrument_summary import (
    get_futures_instruments,
)
from transaction_management.deribit.distributing_ws_data import caching_distributing_data
from utilities.system_tools import (
    SignalHandler,
    back_up_db,
    get_config_tomli,
    parse_error_message, 
    provide_path_for_file,
    )
from utilities.string_modification import (
    remove_double_brackets_in_list,
    remove_redundant_elements,
)
from utilities.pickling import replace_data


def handle_ctrl_c(
    signum, 
    stack_frame
    )->None:
    
    sys.exit(0)
    
                  
signal_handler = SignalHandler()

async def main():
    """
    https://redis-py.readthedocs.io/en/stable/examples/asyncio_examples.html
    """
    sub_account_id = "deribit-148510"

    # registering strategy config file    
    file_toml = "config_strategies.toml"
    
    try:

        pool = aioredis.ConnectionPool.from_url(
            "redis://localhost", 
            port=6379, 
            db=0, 
            protocol=3, 
            encoding="utf-8",
            decode_responses=True
            )
        
        client_redis: object = aioredis.Redis.from_pool(pool)
        
        # parsing config file
        config_app = get_config_tomli(file_toml)
        # get redis channels
        redis_channels: dict = config_app["redis_channels"][0]

        queue = Queue(maxsize=1)
        
        stream = StreamingTopMoversData(sub_account_id)
                
        producer_task = asyncio.create_task(
            stream.ws_manager(
                client_redis,
                redis_channels,
                queue,
)
            ) 
                 
                        
        await asyncio.sleep(0.0005)
        
        await asyncio.gather(
            
            producer_task, 
        
            
                        )  

        await queue.join()

    except Exception as error:
        
        parse_error_message(error)
        await telegram_bot_sendtext (
            f"app-{error}",
            "general_error"
            )

if __name__ == "__main__":
    
    try:
        signal.signal(signal.SIGINT, handle_ctrl_c) # terminate on ctrl-c
        
        uvloop.run(main())
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        
        asyncio.get_event_loop().run_until_complete(main())
        
    except Exception as error:
        parse_error_message(error)
        
        asyncio.run(telegram_bot_sendtext (
            error,
            "general_error"
            ))
