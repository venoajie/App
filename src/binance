#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
from datetime import datetime, timedelta, timezone
import os

# installed
from dataclassy import dataclass, fields
import json
from loguru import logger as log
import orjson
import tomli
import websockets
import asyncio
import websockets
import json

import time
import hashlib
import hmac
from urllib.parse import urlencode

from transaction_management.deribit.managing_deribit import (
    ModifyOrderDb)

# user defined formula
from configuration import id_numbering, config#, config_oci

from utilities.system_tools import (
    provide_path_for_file,
    async_raise_error_message,
    raise_error_message,)


def parse_dotenv (sub_account) -> dict:
    return config.main_dotenv(sub_account)

def get_config(file_name: str) -> list:
    """ """
    config_path = provide_path_for_file (file_name)
    
    try:
        if os.path.exists(config_path):
            with open(config_path, "rb") as handle:
                read= tomli.load(handle)
                return read
    except:
        return []

def hashing(query_string,
            apiSecret):
    return hmac.new(
        apiSecret.encode("utf-8"), query_string.encode("utf-8"), hashlib.sha256
    ).hexdigest()



def get_timestamp():
    return int(time.time() * 1000)

""" === end of util functions === """

def server_time_message():
	"""
		The message to get server time
	"""

	return {
	  "id": "187d3cb2-942d-484c-8271-4e2141bbadb1",
	  "method": "time"
	}
 
@dataclass(unsafe_hash=True, slots=True)
class StreamAccountData(ModifyOrderDb):

    sub_account_id: str
    client_id: str = fields 
    client_secret: str = fields 
    modify_order_and_db: object = fields 
    # Async Event Loop
    loop = asyncio.get_event_loop()
#    ws_connection_url: str = "wss://stream.binance.com:9443/ws/btcusdt@depth"
    ws_connection_url_non_stream: str = "wss://ws-api.binance.com/ws-api/v3" #"wss://stream.binance.com:9443/ws"
    ws_connection_url_usd_futures: str = "wss://ws-fapi.binance.com/ws-fapi/v1"
    ws_connection_url_usd_pm: str = "wss://fstream.binance.com/pm"
    ws_connection_url_coin_futures: str = "wss://dstream.binance.com"
    ws_connection_url: str = "wss://ws-api.binance.com/ws-api/v3" #"wss://stream.binance.com:9443/ws"
    # Instance Variables
    #connection_url: str = "wss://stream.binance.com:9443/ws/btcusdt@depth"
    websocket_client: websockets.WebSocketClientProtocol = None
    refresh_token: str = None
    refresh_token_expiry_time: int = None
            
    def __post_init__(self):
        self.modify_order_and_db: str = ModifyOrderDb(self.sub_account_id)
        self.client_id: str = parse_dotenv(self.sub_account_id)["my_id"]
        self.client_secret: str = (parse_dotenv(self.sub_account_id)["my_secret"])
        
        # Start Primary Coroutine
        self.loop.run_until_complete(self.ws_manager())
    
    async def ws_manager(self) -> None:
        async with websockets.connect(
            self.ws_connection_url_usd_futures,
            ping_interval=None,
            compression=None,
            close_timeout=60,
            ) as self.websocket_client:
            while True:
                     
                while self.websocket_client.open:
                    
                    params = [
                "btcusdt@depth"
                ]
                    params = ["/stream?streams=btcusdt@trade&timeUnit=millisecond"]
                        
                    #await self.ws_operation(
                    #    "SUBSCRIBE",
                    #    params)
                     
                    # Authenticate WebSocket Connection
                    

                    timestamp = get_timestamp()
                    
                    payload = {
                        "apiKey": self.client_id,
                        "timestamp": timestamp
                    }
                    
                    signature = hashing(urlencode(payload), self.client_secret)
                    
                    method = "account.status"
                    await self.ws_auth_m_futures(method)
                    #await self.ws_auth(method)
                    pm = f"wss://fstream.binance.com/pm/ws/{signature}/balance"
                    log.debug(f"pm {pm}")

                    # Receive WebSocket messages
                    message: bytes = await self.websocket_client.recv()
                    message: dict = orjson.loads(message)
                    message_channel: str = None
                    log.warning (message)
                    #await asyncio.sleep(0.5)

    async def ws_auth_pm(
        self,
        method) -> None:
        """
        Requests DBT's `public/auth` to
        authenticate the WebSocket Connection.
        """
        sleep_time: int = .5
        
        await asyncio.sleep(sleep_time)

        timestamp = get_timestamp()
        
        payload = {
            "apiKey": self.client_id,
            "timestamp": timestamp
        }
        
        signature = hashing(urlencode(payload), self.client_secret)
        
        msg: dict = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab7507ba",
            "method": method,
            "params": {
                "apiKey": self.client_id,
                "timestamp": timestamp,
                "signature": signature
            }
        }

        log.debug (f" method {method}")
        log.debug (f" signature {signature}")
        log.error (f" json.dumps(msg) {json.dumps(signature)}")

        try:
            await self.websocket_client.send(json.dumps(msg))

        except Exception as error:
            
            raise_error_message (
            error, 
            1,
            "app"
            )

    async def ws_auth_m_futures(
        self,
        method) -> None:
        """
        Requests DBT's `public/auth` to
        authenticate the WebSocket Connection.
        """
        sleep_time: int = .5
        
        await asyncio.sleep(sleep_time)

        timestamp = get_timestamp()
        
        payload = {
            "apiKey": self.client_id,
            "timestamp": timestamp
        }
        
        signature = hashing(urlencode(payload), self.client_secret)
        
        msg: dict = {
            "id": "605a6d20-6588-4cb9-afa0-b0ab7507ba",
            "method": method,
            "params": {
                "apiKey": self.client_id,
                "timestamp": timestamp,
                "signature": hashing(urlencode(payload), self.client_secret)
            }
        }

        log.debug (f" method {method}")
        log.debug (f" signature {signature}")
        log.error (f" json.dumps(msg) {json.dumps(msg)}")

        try:
            await self.websocket_client.send(json.dumps(msg))

        except Exception as error:
            
            raise_error_message (
            error, 
            1,
            "app"
            )

    async def ws_auth_non_stream(
        self,
        method) -> None:
        """
        Requests DBT's `public/auth` to
        authenticate the WebSocket Connection.
        """
        sleep_time: int = .5
        
        await asyncio.sleep(sleep_time)

        timestamp = get_timestamp()
        payload = {
            "apiKey": self.client_id,
            "timestamp": timestamp
        }
        
        msg: dict = {
            "id": "2",
            "method": method,
            #"method": "account.status",
            "params": {
                "apiKey": self.client_id,
                "signature": hashing(urlencode(payload), self.client_secret),
                "timestamp": timestamp
            }
	}

        #log.debug (f" msg {msg}")
        #log.error (f" json.dumps(msg) {json.dumps(msg)}")

        try:
            await self.websocket_client.send(json.dumps(msg))

        except Exception as error:
            
            raise_error_message (
            error, 
            1,
            "app"
            )

    async def ws_auth(self) -> None:
        """
        Requests DBT's `public/auth` to
        authenticate the WebSocket Connection.
        """
        sleep_time: int = .5
        
        await asyncio.sleep(sleep_time)

        timestamp = get_timestamp()
        payload = {
            "apiKey": self.client_id,
            "timestamp": timestamp
        }
        msg: dict = {
	  "id": "605a6d20-6588-4cb9-afa0-b0ab087507ba",
	  "method": "account.status",
	  "params": {
	    "apiKey": self.client_id,
	    "signature": hashing(urlencode(payload), self.client_secret),
	    "timestamp": timestamp
	  }
	}

        #log.debug (f" msg {msg}")
        #log.error (f" json.dumps(msg) {json.dumps(msg)}")

        try:
            await self.websocket_client.send(json.dumps(msg))

        except Exception as error:
            
            raise_error_message (
            error, 
            1,
            "app"
            )

    async def ws_operation(
        self,
        method,
        params
        ) -> None:
        """
        Requests `public/subscribe` or `public/unsubscribe`
        to DBT's API for the specific WebSocket Channel.
        """
        sleep_time: int = .5
        
        await asyncio.sleep(sleep_time)

        msg = {"method": method, "params":params
                ,
                "id": 1
                }


        #log.info(ws_channel)
        await self.websocket_client.send(json.dumps(msg))

def main():
    # https://www.codementor.io/@jflevesque/python-asynchronous-programming-with-asyncio-library-eq93hghoc
    sub_account_id = "binance-sub-1"
    
    try:
        StreamAccountData(sub_account_id)

    except Exception as error:
        log.critical (error)
        raise_error_message (
            error, 
            3,
            "app"
            )
                
if __name__ == "__main__":
    
    try:
        main()
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        asyncio.get_event_loop().run_until_complete(main().stop_ws())
        
    except Exception as error:
        log.critical (error)
        asyncio. telegram_bot_sendtext (
            error,
            "general_error"
            )
        raise_error_message(
        error, 
        3, 
        "app"
        )
