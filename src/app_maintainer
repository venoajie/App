#!/usr/bin/python3
# -*- coding: utf-8 -*-

# built ins
import asyncio
from asyncio import Queue
import signal
import sys

# installed
import uvloop
import numpy as np
import redis.asyncio as aioredis
#from redistimeseries.client import Client

asyncio.set_event_loop_policy(uvloop.EventLoopPolicy())

from data_cleaning.app_data_cleaning import reconciling_size
from messaging.telegram_bot import telegram_bot_sendtext
from strategies.relabelling_trading_result import relabelling_trades
from transaction_management.deribit import api_requests, cancelling_active_orders,get_instrument_summary, processing_orders, starter
from market_understanding.price_action.candles_analysis import get_market_condition
from utilities import string_modification as str_mod, system_tools


def handle_ctrl_c(
    signum, 
    stack_frame
    )->None:
    
    sys.exit(0)
    
                  
signal_handler = system_tools.SignalHandler()

async def main():
    """
    https://redis-py.readthedocs.io/en/stable/examples/asyncio_examples.html
    """
    sub_account_id = "deribit-148510"

    # registering strategy config file    
    file_toml = "config_strategies.toml"
    
    try:

        private_data: object = api_requests.SendApiRequest(sub_account_id)

        pool = aioredis.ConnectionPool.from_url(
            "redis://localhost", 
            port=6379, 
            db=0, 
            protocol=3, 
            encoding="utf-8",
            decode_responses=True
            )
        
        client_redis: object = aioredis.Redis.from_pool(pool)
        
        # parsing config file
        config_app = system_tools.get_config_tomli(file_toml)

        # get tradable strategies
        tradable_config_app = config_app["tradable"]

        # get TRADABLE currencies
        currencies: list = [o["spot"] for o in tradable_config_app][0]

        strategy_attributes = config_app["strategies"]

        relevant_tables = config_app["relevant_tables"][0]

        order_db_table = relevant_tables["orders_table"]

        cancellable_strategies = [
            o["strategy_label"] for o in strategy_attributes if o["cancellable"] == True
        ]

        settlement_periods = str_mod.remove_redundant_elements(
        str_mod.remove_double_brackets_in_list(
            [o["settlement_period"] for o in strategy_attributes]
        )
    )
        
        futures_instruments = await get_instrument_summary.get_futures_instruments(
            currencies,
            settlement_periods,
        )

        # get redis channels
        redis_channels: dict = config_app["redis_channels"][0]

        await starter.initial_procedures(
            private_data,
            config_app,
            )
        
        sub_account_cached_channel: str = redis_channels["sub_account_cache_updating"]
        
        result_template = str_mod.message_template()

        from loguru import logger as log
        
        # sub_account_combining
        sub_accounts = [
            await private_data.get_subaccounts_details(o) for o in currencies
        ]        
        
        initial_data_subaccount = starter.sub_account_combining(
            sub_accounts,
            sub_account_cached_channel,
            result_template,
        )
        
        resolutions: list = [o["resolutions"] for o in tradable_config_app][0]

        strategy_attributes = config_app["strategies"]

        queue = Queue(maxsize=1)
                 
        await asyncio.sleep(0.0005)
            
        await asyncio.gather(
         
            cancelling_active_orders.cancelling_orders(
            private_data,
            currencies,
            client_redis,
            config_app,
            initial_data_subaccount,
            redis_channels,
            strategy_attributes,
                ),   
            
            processing_orders.processing_orders(
                private_data,
                client_redis,
                cancellable_strategies,
                currencies,
                initial_data_subaccount,
                order_db_table,
                redis_channels,
                strategy_attributes,
                ),
        
            relabelling_trades(
                private_data,
                config_app),
            
            get_market_condition(
                client_redis,
                config_app,
                currencies,
                redis_channels,
                resolutions,
                np),
            
            
            reconciling_size(
                private_data,
                client_redis,
                redis_channels,
                config_app,
                initial_data_subaccount,
                futures_instruments,
                ),                    
                        )  

        await queue.join()

    except Exception as error:
        
        system_tools.parse_error_message(error)
        await telegram_bot_sendtext (
            f"app-{error}",
            "general_error"
            )

if __name__ == "__main__":
    
    try:
        signal.signal(signal.SIGINT, handle_ctrl_c) # terminate on ctrl-c
        
        uvloop.run(main())
        
    except(
        KeyboardInterrupt, 
        SystemExit
        ):
        
        asyncio.get_event_loop().run_until_complete(main())
        
    except Exception as error:
        system_tools.parse_error_message(error)
        
        asyncio.run(telegram_bot_sendtext (
            error,
            "general_error"
            ))
